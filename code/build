#!/bin/bash


# usage
usage="usage: $0 [ ${underline}pdf${normal} | word | all ]"

# formatting...
underline=$(tput smul)
normal=$(tput sgr0)

# Filename.  
# We assume that the parent dir is relevant e.g.
# parent dir = "Book"
# child dir = "Chapter"
# Filename = "Book_-_Chapter"

fpathToFN() {
  DIRNAME=$(pwd)
  base1="${DIRNAME##*/}"
  dir1="${DIRNAME%/*}"
  echo "${dir1##*/} - $base1"| sed 's/ /_/g'
}

### Work out input and output files
# if just one md file use that, otherwise cat all
# md files into a temp file that we'll delete later...


function rndFN {
    # stolen from https://stackoverflow.com/questions/32484504/using-random-to-generate-a-random-string-in-bash
    # Return random alpha-numeric string of given LENGTH
    #
    # Usage: VALUE=$(rand-str $LENGTH)
    #    or: VALUE=$(rand-str)

    local DEFAULT_LENGTH=64
    local LENGTH=${1:-$DEFAULT_LENGTH}

    tr -dc A-Za-z0-9 </dev/urandom | head -c "$LENGTH"
    # -dc: delete complementary set == delete all except given set
}

tmp=$(rndFN)

## we don't want to overwrite an existing file...
while [ -f "$tmp" ]; do   tmp=$(rndFN 8); done

count=$(find . -type f -iname "*.md" 2>/dev/null | wc -l)
if [ "$count" = 1 ]
then 
  input=$(find . -type f -iname "*.md")
  output=$(basename -- "$input")
  output=output/"${output%.*}"
else
  cat $(find . -iname "*.md" -exec echo "{}" \; | sort) >>"$tmp"
  input=$tmp
  output="output/$(fpathToFN)"
fi 

### BUILD ARGUMENTS ###
#
# eisvogel template overrides the language param, it needs declaring
# here not in the meta.yaml ...

buildPDF() {
  logfile=$output.pdf.log
  printf "%sbuilding pdf...\n\tSee $logfile for details\n"
  pandoc  "$input"              \
    --metadata-file=meta.yaml   \
    -V lang=en-GB               \
    --biblio=references.bib     \
    --verbose                   \
		--pdf-engine=xelatex        \
		--output="$output".pdf      \
		--template template/def.tex \
		--highlight-style=zenburn   \
    --strip-comments            \
    --csl=template/def.csl > "$logfile" 2>&1
  }

buildWORD() {
  logfile=$output.docx.log
  printf "%sbuilding word document...\n\tSee $logfile for details\n"
  pandoc  "$input"               \
		--biblio=references.bib      \
    --verbose                    \
		-o "$output".docx            \
		--template template/def.docx \
		--highlight-style=zenburn    \
    --strip-comments             \
		--csl=template/def.csl > "$logfile" 2>&1
}


if [[ -z "$1" ]]
then
  buildPDF
elif [[ -n "$1" ]]
then
  case "$1" in 
    "pdf")
      buildPDF
      ;;
    "silent")
      buildPDF > /dev/null
      ;; 
    "word")
      buildWORD
      ;;
    "all")
      buildPDF
      buildWORD
      ;;
   "clean")
     [ "$(ls -A output)" ] &&
       [ "$(ls -A output)" ] &&
     rm -v output/* || printf "Already empty: nothing to do\n"
     ;;
   *)
     printf "%s$usage"
     ;;
 esac
fi
# if we used a temp file, remove it.
if [ -f "$tmp" ]
  then rm "$tmp"
fi

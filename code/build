#!/usr/bin/env bash

######  STRICT MODE  ###########################################

set -u
set -e
trap "echo ""Aborting due to errexit on line $LINENO. Exit code: $?"" >&2" ERR
set -o errtrace
set -o pipefail
IFS=$'\n\t'

######  VARIABLES    ###########################################

_ME="$(basename "${0}")"
_OUTDIR='output/'

# formatting
bold=$(tput bold)
normal=$(tput sgr0)

######  FUNCTIONS    ###########################################

# Filename logic (IN ORDER, rules overwrite preceeding ones)
# if single file   - that's our name
# if multiple file - use "report"
# if specified in meta.yaml, use that

_countMarkdown() {
  find . -name "*.md" -type f | wc -l
}

_outFNFromMD() {
  input=$(find . -type f -iname "*.md")
  output=$(basename -- "$input")
  echo "${output%.*}"
}

_yamlLineMatches() {
  grep -c "pdf-title" meta.yaml
}

_outFNFromYaml() {
  grep "pdf-title" meta.yaml | sed 's/pdf-title://;s/^[ \t]*//;s/[ \t]*$//;s/[][]//g;s/[^A-Za-z0-9.-]/_/g'
}

_outputFileName() {
  outFile='report'
  if [[ $(_countMarkdown) -eq 1 ]]; then
    outFile=$(_outFNFromMD)
  fi
  if [[ $(_yamlLineMatches) -eq 1 ]]; then
    outFile=$(_outFNFromYaml)
  fi
  printf "%s$outFile"
}

_cleanInputFile() {
  # files should be utf8 anyway, but explicitly change it here...
  iconv -c --verbose -t utf8 "$1" >"$2"
  rm "$1"
}

_makeInputFile() {
  rm -rf .tmp && mkdir .tmp
  tmpfile=".tmp/$(date +%s)"
  cat $(find . -iname "*.md" -exec echo "{}" \; | sort) >>"$tmpfile"
  _cleanInputFile "$tmpfile" "$tmpfile.md"
}

### BUILD ARGUMENTS ###

output=$(_outputFileName)

_buildReport() {
  local format="$1"
  logfile="$output.$format.log"
  if [ "$noLogFiles" = false ]; then
    printf "%sbuilding $format...\\n  See $logfile for details\\n"
  fi
  pandoc .tmp/*.md \
    --defaults=defaults.yaml \
    --output "$_OUTDIR$output.$format" \
       2>&1 | tee "$_OUTDIR$logfile"
}

_rmlogs() {
  [ "$(find output/ -type f -iname '*.log')" ] && find output/ -type f -iname '*.log' -delete || printf "Already empty: nothing to do\n"
}

_clean() {
  [ "$(ls -A output)" ] && rm -v output/* || printf "Already empty: nothing to do\n"
}

_tidy() {
  rm -rf .tmp
}

_print_help() {
  cat <<HEREDOC
Simplifies building pdf / word documents 

Usage:
  ${_ME} [BUILD OPTIONS]

Build Options:
  ${bold}-h | --help${normal}   Show this screen.
  ${bold}-p | --pdf${normal}    build pdf
  ${bold}-w | --word${normal}   build docx
  ${bold}-c | --clean${normal}  clear the output directory
  ${bold}-s | --silent${normal} remove any logs created
HEREDOC
}

###### OPTION PARSING ##########################################

OPTIONS=hpwcs
LONGOPTS=help,pdf,word,clean,silent

# -regarding ! and PIPESTATUS see above
# -temporarily store output to be able to check for errors
# -activate quoting/enhanced mode (e.g. by writing out “--options”)
# -pass arguments only via   -- "$@"   to separate them correctly
! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
  # e.g. return value is 1
  #  then getopt has complained about wrong arguments to stdout
  exit 2
fi
# read getopt’s output this way to handle the quoting right:
eval set -- "$PARSED"

clearOutput=false
makeInputFile=false
noLogFiles=false
showHelp=false

formats_array=()
if [ "$1" == '--' ]; then
  ## no options passed = help message
  showHelp=true
else
  while true; do
    case "$1" in
    -p | --pdf)
      formats_array+=("pdf")
      makeInputFile=true
      shift
      ;;
    -w | --word)
      formats_array+=("docx")
      makeInputFile=true
      shift
      ;;
    -c | --clean)
      clearOutput=true
      shift
      ;;
    -s | --silent)
      noLogFiles=true
      shift
      ;;
    -h | --help)
      showHelp=true
      shift
      ;;
    --)
      shift
      break
      ;;
    *)
      showHelp=true
      ;;
    esac
  done
fi

main() {
  trap _tidy EXIT
  if [ "$showHelp" = true ]; then
    # print help and nothing else...
    _print_help
    exit 0
  else
    if [ "$clearOutput" = true ]; then
      _clean
      exit
    fi
    if [ $makeInputFile = true ]; then
      _makeInputFile
      for format in "${formats_array[@]}"; do
        _buildReport "$format"
      done
    fi
    if [ "$noLogFiles" = true ]; then _rmlogs; fi
  fi
}

main

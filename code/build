#!/usr/bin/env bash

set -u -e -o errtrace -o pipefail
trap "echo ""Aborting due to errexit on line $LINENO. Exit code: $?"" >&2" ERR
IFS=$'\n\t'

######  VARIABLES    ###########################################

_ME="$(basename "${0}")"
_OUTDIR='output/'

# formatting
bold=$(tput bold)
normal=$(tput sgr0)

######  FUNCTIONS    ###########################################
_latestMarkdownDate() {
  _LAST_MD_FILE=$(ls -tr ./*.md | tail -1)
  date -r "$_LAST_MD_FILE" "+%Y/%m/%d"
}

_updateMeta() {
  # update the date
  _OLD_DATE=$(grep  "date: " meta.yaml | tr -cd '[:digit:]/')
  #_NEW_DATE=$(date +%Y/%m/%d)
  _NEW_DATE=$(_latestMarkdownDate)
  [[ $_OLD_DATE -eq $_NEW_DATE ]] || \
  sed -i "s#$_OLD_DATE#$_NEW_DATE#" meta.yaml
}

_countMarkdown() {
  find . -iwholename "./*.md" -type f | wc -l
}

_outFNFromMD() {
  input=$(find . -type f -iwholename "./*.md")
  output=$(basename -- "$input")
  echo "${output%.*}"
}

_yamlLineMatches() {
  grep -c "pdf-title" meta.yaml
}

_outFNFromYaml() {
  # if it exists, use a sanitised "pdf-title" as the filename
  grep -oP '(?<=pdf-title: \[).*(?=\])' meta.yaml \
    |tr -d '\n' | tr -cs "[:alnum:]" "_"
}

_outputFileName() {
  # multiple md = use "report"
  # single md = use that filename
  # if specified in yaml, use that instead
  outFile='report'
  if [[ $(_countMarkdown) -eq 1 ]]; then
    outFile=$(_outFNFromMD)
  fi
  if [[ $(_yamlLineMatches) -eq 1 ]]; then
    outFile=$(_outFNFromYaml)
  fi
  printf "%s$outFile"
}

_cleanInputFile() {
  # files should be utf8 anyway, but explicitly change it here...
 local input="$1"
 local temp="$1".utf8
  iconv -c --verbose -t utf8 "$input" >"$temp" && \
  mv "$temp" "$input"
}

_concatenateFiles() {
  # all files should have a pagebreak
  printf "file order:\\n"
  for file in ./*.md; do
    (
      cat "${file}"
      printf "\\n\\n"
      printf "\\pagebreak"
      printf "\\n"
    ) >>"$1"
    printf "%s\\t$file\\n"
  done
  sed -i '$ d' "$1" #remove the last pagebreak that we added
}

_preprocess_mermaid() {
  local infile="$1"
  local outfile; outfile="${infile//.md/-mermaid.md}"
  echo " preprocessing $infile -->  $outfile"
  # replace mermaid code blocks with images
  npx -p @mermaid-js/mermaid-cli mmdc -i "$infile" -o "$outfile" \
    --outputFormat=png && \
  mv "$outfile" "$infile"
  # where we see links to ./*-mermaid*.png, prepend the the .tmp/ directory
  sed -i "s#(\./#(.tmp/#g" "$infile"
}

_makeInputFile() {
  rm -rf .tmp && mkdir .tmp
  tmpfile=".tmp/$(date +%s).md"
  #concatenate all the files found with a pagebreak between each
  _concatenateFiles "$tmpfile"
  # replace mermaid code blocks with images
  _cleanInputFile "$tmpfile"
  _preprocess_mermaid "$tmpfile"
}

_buildReport() {
  [[ -d "$_OUTDIR" ]] || mkdir -p "$_OUTDIR"
  local format="$1"
  logfile="$output.$format.log"
  if [ "$noLogFiles" = false ]; then
    printf "%sbuilding $format...\\n  See $logfile for details\\n"
  fi
  pandoc .tmp/*.md \
    --defaults=defaults.yaml \
    --output "$_OUTDIR$output.$format" \
    --lua-filter=config/pagebreak.lua \
    2>&1 | tee "$_OUTDIR$logfile"
}

_rmlogs() {
  [ "$(find output/ -type f -iname '*.log')" ] && find output/ -type f -iname
  '*.log' -delete || printf "Already empty: nothing to do\\n"
}

_clean() {
  [ "$(ls -A output)" ] && rm -v output/* \
    || printf "Already empty: nothing to do\\n"
}

_tidy() {
  rm -rf .tmp
}

_print_help() {
  cat <<HEREDOC
Simplifies building pdf / word documents

Usage:
  ${_ME} [BUILD OPTIONS]

Build Options:
  ${bold}-h | --help${normal}   Show this screen.
  ${bold}-p | --pdf${normal}    build pdf
  ${bold}-w | --word${normal}   build docx
  ${bold}-c | --clean${normal}  clear the output directory
  ${bold}-s | --silent${normal} remove any logs created
HEREDOC
}

###### OPTION PARSING ##########################################

OPTIONS=hpwcs
LONGOPTS=help,pdf,word,clean,silent

! PARSED=$(getopt --options=$OPTIONS \
  --longoptions=$LONGOPTS \
  --name "$0" -- "$@")
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
  # e.g. return value is 1
  #  then getopt has complained about wrong arguments to stdout
  exit 2
fi
# read getoptâ€™s output this way to handle the quoting right:
eval set -- "$PARSED"

clearOutput=false
makeInputFile=false
noLogFiles=false
showHelp=false

formats_array=()
if [ "$1" == '--' ]; then
  ## no options passed = help message
  showHelp=true
else
  while true; do
    case "$1" in
      -p | --pdf)
        formats_array+=("pdf")
        makeInputFile=true
        shift
        ;;
      -w | --word)
        formats_array+=("docx")
        makeInputFile=true
        shift
        ;;
      -c | --clean)
        clearOutput=true
        shift
        ;;
      -s | --silent)
        noLogFiles=true
        shift
        ;;
      -h | --help)
        showHelp=true
        shift
        ;;
      --)
        shift
        break
        ;;
      *)
        showHelp=true
        ;;
    esac
  done
fi

main() {
  trap _tidy EXIT # clear our .tmp dir on exit.
  if [ "$showHelp" = true ]; then
    # print help and nothing else...
    _print_help
    exit 0
  else
    if [ "$clearOutput" = true ]; then
      _clean
      exit
    fi
    if [ $makeInputFile = true ]; then
      _makeInputFile
      _updateMeta
      output=$(_outputFileName)
      for format in "${formats_array[@]}"; do
        _buildReport "$format"
      done
    fi
    if [ "$noLogFiles" = true ]; then _rmlogs; fi
  fi
}

main

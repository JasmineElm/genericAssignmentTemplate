#!/usr/bin/env bash

### VARIABLES ###
#
_warn=$(tput setaf 3)
_success=$(tput setaf 2)
_normal=$(tput sgr0)
_gh_base="https://raw.githubusercontent.com"
_quiet=true
_dependencies=( "curl" \
                "texlive" \
                "texlive-latex-extra" \
                "texlive-fonts-recommended" \
                "texlive-fonts-extra" \
                "texlive-xetex" \
                "nodejs" \
                "npm" \
                "librsvg2-bin" \
                "jq"\
                "iconv")

### FUNCTIONS ###
#

_binary_exists() {
  command -v "$1" >/dev/null 2>&1
}

_package_exists() {
  status="$(dpkg-query -W --showformat='${db:Status-Status}' "$1" 2>&1)"
  if [ "$status" = "installed" ]; then
    return 0
  else
    return 1
  fi
}

_quiet_apt() {
  [[ $_quiet == true ]] && echo "-qqy"
}

_explicit_install() {
  [[ $_explicit == true ]] && read -p "Install $1? [y/N] " -n 1 -r
  if [[ $_explicit == true && ! $REPLY =~ ^[Yy]$ ]]; then
    printf "\n%s$_warn\tSkipping $1... $_normal\n"
    return 1
  else
    printf "\n"
    return 0
  fi
}

_install_package() {
  # install a package if it doesn't exist,
  if _package_exists "$1"; then
  printf "%s$_success\t$1 already installed... $_normal\n" && return
  else
    printf "%s$_warn\tInstalling $1... $_normal\n"
    _explicit_install "$1" && \
    sudo apt install "$1" "$(_quiet_apt)"
  fi
}

_get_version() {
  # get the version of a package
  if _binary_exists "$1"; then
    "$1" --version | head -1 | cut -d ' ' -f 2
  else  # if the binary doesn't exist, return 0.0.0
    printf "0.0.0"
  fi
}

_install_latest_pandoc() {
  url=$(curl -s https://api.github.com/repos/jgm/pandoc/releases/latest \
    | grep "browser_download_url.*deb" \
    | cut -d : -f 2,3 \
    | tr -d \" \
    | head -1)
  remote_version="$(echo "$url" | cut -d / -f 8)"
  installed_version=$(_get_version pandoc)

  if [ "$remote_version" \> "$installed_version"  ]; then
    printf "%s$_warn\tInstalling Pandoc $remote_version\n"
    curl -s -L -o p/home/james/Dropbox/git/reportsandoc.deb "$url"
    sudo apt install ./pandoc.deb "$(_quiet_apt)" && rm pandoc.deb
  else
    printf "%s$_success\tPandoc $installed_version already installed\n$_normal"
  fi
}

_install_pagebreak_filter() {
  if [[ -f pagebreak.lua ]]; then
    printf "%s$_success\tpagebreak.lua already installed...\n$_normal"
  else
    curl -s -L -o pagebreak.lua \
  $_gh_base/pandoc-ext/pagebreak/main/pagebreak.lua
  fi
}

_generate_default_docx_template() {
  if [[ -f ../template/def.docx ]]; then
    printf "%s$_success\tdef.docx already installed...\n$_normal"
  else
  pandoc -o ../template/def.docx --print-default-data-file reference.docx
  fi
}

_install_latex_template() {
  if [[   -f ../template/def.tex ]]; then
    printf "%s$_success\tdef.tex already installed...\n$_normal"
  else
  curl -s -L -o ../template/def.tex \
    $_gh_base/Wandmalfarbe/pandoc-latex-template/master/eisvogel.tex
  fi
}

_install_templates() {
  _generate_default_docx_template
  _install_latex_template
}

_install_csl() {
  if [[ ! -f ../template/def.csl ]]; then
    printf "%s$_success\tdef.csl already installed...\n$_normal"
  else
    curl -s -L -o ../template/def.csl \
    $_gh_base/citation-style-language/styles/master/harvard-cite-them-right.csl
  fi
}

_clear_config() {
  # cd to the base of the repo
  cd "$(dirname "$0")/../../" || exit
  printf "%s$_warn\tClearing config... $_normal\n"
  _FILES_TO_REMOVE=("def.csl" "def.tex" "*.log" "*.pdf" "*.deb" "*.lua")
  for file in "${_FILES_TO_REMOVE[@]}"; do
    find . -name "$file" -type f -delete
  done
  cd - >/dev/null || exit
}

_show_help() {
  cat <<HEREDOC
  Usage: $0 [options]
  Options:
    -h, --help      Show this help message and exit
    -q, --quiet     Do not prompt for input (default)
    -e, --explicit  Prompt user for each dependency
    -b, --binaries  Install binaries only
    -c, --config    Install config (templates, csl, filters) only
    -a, --all       Install everything (default)
    -x  --clear     Clear config
  Run script without options to install everything.
HEREDOC
}
## OPTIONS ##

_parse_options() {
  [[ $# -eq 0 ]] && _all=true
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h | --help)
        _show_help
        exit 0
        ;;
      -q | --quiet)
        _quiet=true
        shift
        ;;
      -e | --explicit)
        _explicit=true
        shift
        ;;
      -b | --binaries)
        _binaries=true
        shift
        ;;
      -c | --config)
        _config=true
        shift
        ;;
      -a | --all)
        _all=true
        shift
        ;;
      -x | --clear)
        _clear_config
        exit 0
        ;;
      *)
        printf "%sUnknown option: $1\n"
        _show_help
        exit 1
        ;;
    esac
  done
}

_main() {
  _parse_options "$@"
  [[ $_all == true ]] && _binaries=true && _config=true
  if [[ $_binaries == true ]]; then
    printf "%s$_warn\nConsider running 'apt update' before running this script$_normal\n"
    printf "%s$_warn\n* Checking dependencies... $_normal\n"
    for dependency  in "${_DEPENDENCIES[@]}"; do
      _install_package "$dependency"
    done
    _install_latest_pandoc
  fi
  if [[ $_config == true ]]; then
    printf "%s$_warn\n* Checking filters... $_normal\n"
    _install_pagebreak_filter
    printf "%s$_warn\n* Checking templates... $_normal\n"
    _install_templates
    _install_csl
  fi
}
### MAIN ###
# if script is run from the wrong directory, cd to the correct one
if [ ! -f "setup.sh" ]; then
  cd "$(dirname "$0")" || exit
fi
_main "$@"
